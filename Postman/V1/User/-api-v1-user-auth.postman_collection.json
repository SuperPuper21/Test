{
	"info": {
		"_postman_id": "497b2948-2f33-44c2-b164-af24dc53c8f1",
		"name": "/api/v1/user/auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Customer",
			"item": [
				{
					"name": "/api/v1/user/auth(200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"token_cust\", data.token);\r",
									"\r",
									"//1. Status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\")\r",
									"});\r",
									"\r",
									"//4. Status message is Bad Request\r",
									"pm.test(\"Status message is OK\", function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//5. \r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData.token).to.be.a(\"string\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"customer@transport.isource.ru\", \"password\":\"testPassword\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/user/auth(400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code is 400\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"code\")\r",
									"    pm.expect(jsonData).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//4. Status message is Bad Request\r",
									"pm.test(\"Status message is Bad Request\", function(){\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//5. Bad request\r",
									"pm.test(\"Bad request\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.message).to.eql(\"Bad request\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/user/auth(403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code is 403\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"code\")\r",
									"    pm.expect(jsonData).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//4. Status message is Forbidden\r",
									"pm.test(\"Status message is Forbidden\", function(){\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"//5. User not found\r",
									"pm.test(\"User not found\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.message).to.eql(\"User not found\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"cuomer@transport.isource.ru\",\"password\":\"testPassword\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/user/auth(403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code is 403\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"code\")\r",
									"    pm.expect(jsonData).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//4. Status message is Forbidden\r",
									"pm.test(\"Status message is Forbidden\", function(){\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"//5. Wrong password\r",
									"pm.test(\"Wrong password\", function() {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.message).to.eql(\"Wrong password\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"customer@transport.isource.ru\",\"password\":\"testPssword\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transport_company",
			"item": [
				{
					"name": "/api/v1/user/auth(200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"token_com\", data.token);\r",
									"\r",
									"//1. Status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\")\r",
									"});\r",
									"\r",
									"//4. Status message is Bad Request\r",
									"pm.test(\"Status message is OK\", function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//5. Test data type of the response\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData.token).to.be.a(\"string\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"transport_company@transport.isource.ru\",\"password\":\"testPassword\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/user/auth(400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code is 400\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"code\")\r",
									"    pm.expect(jsonData).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//4. Status message is Bad Request\r",
									"pm.test(\"Status message is Bad Request\", function(){\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//5. Bad request\r",
									"pm.test(\"Bad request\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.message).to.eql(\"Bad request\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/user/auth(403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code is 403\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"code\")\r",
									"    pm.expect(jsonData).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//4. Status message is Forbidden\r",
									"pm.test(\"Status message is Forbidden\", function(){\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"//5. User not found\r",
									"pm.test(\"User not found\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.message).to.eql(\"User not found\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"transportcompany@transport.isource.ru\",\"password\":\"testPassword\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/user/auth(403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code is 403\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"//2. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//3. Fields in the responce\r",
									"pm.test(\"Fields in the responce\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"code\")\r",
									"    pm.expect(jsonData).to.have.property(\"message\")\r",
									"});\r",
									"\r",
									"//4. Status message is Forbidden\r",
									"pm.test(\"Status message is Forbidden\", function(){\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"//5. Wrong password\r",
									"pm.test(\"Wrong password\", function() {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.message).to.eql(\"Wrong password\")\r",
									"});\r",
									"\r",
									"//6. The response has specific header with a specific value\r",
									"pm.test(\"The response has specific header with a specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"transport_company@transport.isource.ru\",\"password\":\"testPssword\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/user/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}